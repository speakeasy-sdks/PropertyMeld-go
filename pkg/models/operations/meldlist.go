// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"MeldAPI/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

type MeldListSecurity struct {
	PMOAuth2Authentication string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// MeldListAckApproval - ack_approval
type MeldListAckApproval string

const (
	MeldListAckApprovalTrue  MeldListAckApproval = "true"
	MeldListAckApprovalFalse MeldListAckApproval = "false"
)

func (e MeldListAckApproval) ToPointer() *MeldListAckApproval {
	return &e
}

func (e *MeldListAckApproval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListAckApproval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListAckApproval: %v", v)
	}
}

// MeldListCategories - categories
type MeldListCategories string

const (
	MeldListCategoriesForRentSign              MeldListCategories = "FOR_RENT_SIGN"
	MeldListCategoriesEvaluation               MeldListCategories = "EVALUATION"
	MeldListCategoriesTurnover                 MeldListCategories = "TURNOVER"
	MeldListCategoriesAppliances               MeldListCategories = "APPLIANCES"
	MeldListCategoriesBlindsWindowTreatments   MeldListCategories = "BLINDS_WINDOW_TREATMENTS"
	MeldListCategoriesCircuitBreaker           MeldListCategories = "CIRCUIT_BREAKER"
	MeldListCategoriesCleaning                 MeldListCategories = "CLEANING"
	MeldListCategoriesDoors                    MeldListCategories = "DOORS"
	MeldListCategoriesDriveway                 MeldListCategories = "DRIVEWAY"
	MeldListCategoriesDrywall                  MeldListCategories = "DRYWALL"
	MeldListCategoriesElectrical               MeldListCategories = "ELECTRICAL"
	MeldListCategoriesExterior                 MeldListCategories = "EXTERIOR"
	MeldListCategoriesFireplace                MeldListCategories = "FIREPLACE"
	MeldListCategoriesFlooring                 MeldListCategories = "FLOORING"
	MeldListCategoriesGarageDoor               MeldListCategories = "GARAGE_DOOR"
	MeldListCategoriesGarbageDisposal          MeldListCategories = "GARBAGE_DISPOSAL"
	MeldListCategoriesGeneral                  MeldListCategories = "GENERAL"
	MeldListCategoriesHardware                 MeldListCategories = "HARDWARE"
	MeldListCategoriesHvac                     MeldListCategories = "HVAC"
	MeldListCategoriesInterior                 MeldListCategories = "INTERIOR"
	MeldListCategoriesLandscaping              MeldListCategories = "LANDSCAPING"
	MeldListCategoriesLocks                    MeldListCategories = "LOCKS"
	MeldListCategoriesOtherWorkCategory        MeldListCategories = "OTHER_WORK_CATEGORY"
	MeldListCategoriesPainting                 MeldListCategories = "PAINTING"
	MeldListCategoriesOutsideWaterSpigot       MeldListCategories = "OUTSIDE_WATER_SPIGOT"
	MeldListCategoriesPestControl              MeldListCategories = "PEST_CONTROL"
	MeldListCategoriesPlumbing                 MeldListCategories = "PLUMBING"
	MeldListCategoriesCarpentry                MeldListCategories = "CARPENTRY"
	MeldListCategoriesPool                     MeldListCategories = "POOL"
	MeldListCategoriesRoofing                  MeldListCategories = "ROOFING"
	MeldListCategoriesSewer                    MeldListCategories = "SEWER"
	MeldListCategoriesShower                   MeldListCategories = "SHOWER"
	MeldListCategoriesSiding                   MeldListCategories = "SIDING"
	MeldListCategoriesSmokeDetectorCoDetectors MeldListCategories = "SMOKE_DETECTOR_CO_DETECTORS"
	MeldListCategoriesSoffitFascia             MeldListCategories = "SOFFIT_FASCIA"
	MeldListCategoriesStairs                   MeldListCategories = "STAIRS"
	MeldListCategoriesToilet                   MeldListCategories = "TOILET"
	MeldListCategoriesTowelBars                MeldListCategories = "TOWEL_BARS"
	MeldListCategoriesViolations               MeldListCategories = "VIOLATIONS"
	MeldListCategoriesWasherDryer              MeldListCategories = "WASHER_DRYER"
	MeldListCategoriesWaterDamage              MeldListCategories = "WATER_DAMAGE"
	MeldListCategoriesWaterHeater              MeldListCategories = "WATER_HEATER"
	MeldListCategoriesWaterSoftener            MeldListCategories = "WATER_SOFTENER"
	MeldListCategoriesWindows                  MeldListCategories = "WINDOWS"
)

func (e MeldListCategories) ToPointer() *MeldListCategories {
	return &e
}

func (e *MeldListCategories) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FOR_RENT_SIGN":
		fallthrough
	case "EVALUATION":
		fallthrough
	case "TURNOVER":
		fallthrough
	case "APPLIANCES":
		fallthrough
	case "BLINDS_WINDOW_TREATMENTS":
		fallthrough
	case "CIRCUIT_BREAKER":
		fallthrough
	case "CLEANING":
		fallthrough
	case "DOORS":
		fallthrough
	case "DRIVEWAY":
		fallthrough
	case "DRYWALL":
		fallthrough
	case "ELECTRICAL":
		fallthrough
	case "EXTERIOR":
		fallthrough
	case "FIREPLACE":
		fallthrough
	case "FLOORING":
		fallthrough
	case "GARAGE_DOOR":
		fallthrough
	case "GARBAGE_DISPOSAL":
		fallthrough
	case "GENERAL":
		fallthrough
	case "HARDWARE":
		fallthrough
	case "HVAC":
		fallthrough
	case "INTERIOR":
		fallthrough
	case "LANDSCAPING":
		fallthrough
	case "LOCKS":
		fallthrough
	case "OTHER_WORK_CATEGORY":
		fallthrough
	case "PAINTING":
		fallthrough
	case "OUTSIDE_WATER_SPIGOT":
		fallthrough
	case "PEST_CONTROL":
		fallthrough
	case "PLUMBING":
		fallthrough
	case "CARPENTRY":
		fallthrough
	case "POOL":
		fallthrough
	case "ROOFING":
		fallthrough
	case "SEWER":
		fallthrough
	case "SHOWER":
		fallthrough
	case "SIDING":
		fallthrough
	case "SMOKE_DETECTOR_CO_DETECTORS":
		fallthrough
	case "SOFFIT_FASCIA":
		fallthrough
	case "STAIRS":
		fallthrough
	case "TOILET":
		fallthrough
	case "TOWEL_BARS":
		fallthrough
	case "VIOLATIONS":
		fallthrough
	case "WASHER_DRYER":
		fallthrough
	case "WATER_DAMAGE":
		fallthrough
	case "WATER_HEATER":
		fallthrough
	case "WATER_SOFTENER":
		fallthrough
	case "WINDOWS":
		*e = MeldListCategories(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListCategories: %v", v)
	}
}

// MeldListDueDateChoice - due_date_choice
type MeldListDueDateChoice string

const (
	MeldListDueDateChoiceOverdue  MeldListDueDateChoice = "overdue"
	MeldListDueDateChoiceToday    MeldListDueDateChoice = "today"
	MeldListDueDateChoiceTomorrow MeldListDueDateChoice = "tomorrow"
	MeldListDueDateChoiceWeek     MeldListDueDateChoice = "week"
)

func (e MeldListDueDateChoice) ToPointer() *MeldListDueDateChoice {
	return &e
}

func (e *MeldListDueDateChoice) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "overdue":
		fallthrough
	case "today":
		fallthrough
	case "tomorrow":
		fallthrough
	case "week":
		*e = MeldListDueDateChoice(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListDueDateChoice: %v", v)
	}
}

// MeldListEverBeenAssigned - ever_been_assigned
type MeldListEverBeenAssigned string

const (
	MeldListEverBeenAssignedTrue  MeldListEverBeenAssigned = "true"
	MeldListEverBeenAssignedFalse MeldListEverBeenAssigned = "false"
)

func (e MeldListEverBeenAssigned) ToPointer() *MeldListEverBeenAssigned {
	return &e
}

func (e *MeldListEverBeenAssigned) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListEverBeenAssigned(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListEverBeenAssigned: %v", v)
	}
}

// MeldListExp - exp
type MeldListExp string

const (
	MeldListExpTrue  MeldListExp = "true"
	MeldListExpFalse MeldListExp = "false"
)

func (e MeldListExp) ToPointer() *MeldListExp {
	return &e
}

func (e *MeldListExp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListExp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListExp: %v", v)
	}
}

// MeldListHasEstimates - has_estimates
type MeldListHasEstimates string

const (
	MeldListHasEstimatesFalse MeldListHasEstimates = "false"
	MeldListHasEstimatesTrue  MeldListHasEstimates = "true"
)

func (e MeldListHasEstimates) ToPointer() *MeldListHasEstimates {
	return &e
}

func (e *MeldListHasEstimates) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "false":
		fallthrough
	case "true":
		*e = MeldListHasEstimates(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListHasEstimates: %v", v)
	}
}

// MeldListMaintType - maint_type
type MeldListMaintType string

const (
	MeldListMaintTypeOne MeldListMaintType = "1"
	MeldListMaintTypeTwo MeldListMaintType = "2"
)

func (e MeldListMaintType) ToPointer() *MeldListMaintType {
	return &e
}

func (e *MeldListMaintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		*e = MeldListMaintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListMaintType: %v", v)
	}
}

// MeldListMeldinvoice - meldinvoice
type MeldListMeldinvoice string

const (
	MeldListMeldinvoiceTrue  MeldListMeldinvoice = "true"
	MeldListMeldinvoiceFalse MeldListMeldinvoice = "false"
)

func (e MeldListMeldinvoice) ToPointer() *MeldListMeldinvoice {
	return &e
}

func (e *MeldListMeldinvoice) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListMeldinvoice(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListMeldinvoice: %v", v)
	}
}

// MeldListOrderBy - Ordering
type MeldListOrderBy string

const (
	MeldListOrderByOwnerApprovalRequestDate      MeldListOrderBy = "owner_approval_request_date"
	MeldListOrderByMinusOwnerApprovalRequestDate MeldListOrderBy = "-owner_approval_request_date"
)

func (e MeldListOrderBy) ToPointer() *MeldListOrderBy {
	return &e
}

func (e *MeldListOrderBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner_approval_request_date":
		fallthrough
	case "-owner_approval_request_date":
		*e = MeldListOrderBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListOrderBy: %v", v)
	}
}

// MeldListOwnerApproval - owner_approval
type MeldListOwnerApproval string

const (
	MeldListOwnerApprovalOwnerApprovalNotRequested       MeldListOwnerApproval = "OWNER_APPROVAL_NOT_REQUESTED"
	MeldListOwnerApprovalOwnerApprovalRequested          MeldListOwnerApproval = "OWNER_APPROVAL_REQUESTED"
	MeldListOwnerApprovalOwnerApprovalApproved           MeldListOwnerApproval = "OWNER_APPROVAL_APPROVED"
	MeldListOwnerApprovalOwnerApprovalNotApproved        MeldListOwnerApproval = "OWNER_APPROVAL_NOT_APPROVED"
	MeldListOwnerApprovalOwnerApprovalRequestedEstimates MeldListOwnerApproval = "OWNER_APPROVAL_REQUESTED_ESTIMATES"
)

func (e MeldListOwnerApproval) ToPointer() *MeldListOwnerApproval {
	return &e
}

func (e *MeldListOwnerApproval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER_APPROVAL_NOT_REQUESTED":
		fallthrough
	case "OWNER_APPROVAL_REQUESTED":
		fallthrough
	case "OWNER_APPROVAL_APPROVED":
		fallthrough
	case "OWNER_APPROVAL_NOT_APPROVED":
		fallthrough
	case "OWNER_APPROVAL_REQUESTED_ESTIMATES":
		*e = MeldListOwnerApproval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListOwnerApproval: %v", v)
	}
}

// MeldListPriority - priority
type MeldListPriority string

const (
	MeldListPriorityLow    MeldListPriority = "LOW"
	MeldListPriorityMedium MeldListPriority = "MEDIUM"
	MeldListPriorityHigh   MeldListPriority = "HIGH"
)

func (e MeldListPriority) ToPointer() *MeldListPriority {
	return &e
}

func (e *MeldListPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		*e = MeldListPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListPriority: %v", v)
	}
}

// MeldListProjectAssigned - project_assigned
type MeldListProjectAssigned string

const (
	MeldListProjectAssignedTrue  MeldListProjectAssigned = "true"
	MeldListProjectAssignedFalse MeldListProjectAssigned = "false"
)

func (e MeldListProjectAssigned) ToPointer() *MeldListProjectAssigned {
	return &e
}

func (e *MeldListProjectAssigned) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListProjectAssigned(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListProjectAssigned: %v", v)
	}
}

// MeldListRating - rating
type MeldListRating string

const (
	MeldListRatingOne   MeldListRating = "1"
	MeldListRatingTwo   MeldListRating = "2"
	MeldListRatingThree MeldListRating = "3"
	MeldListRatingFour  MeldListRating = "4"
	MeldListRatingFive  MeldListRating = "5"
)

func (e MeldListRating) ToPointer() *MeldListRating {
	return &e
}

func (e *MeldListRating) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		*e = MeldListRating(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListRating: %v", v)
	}
}

// MeldListRecurring - recurring
type MeldListRecurring string

const (
	MeldListRecurringTrue  MeldListRecurring = "true"
	MeldListRecurringFalse MeldListRecurring = "false"
)

func (e MeldListRecurring) ToPointer() *MeldListRecurring {
	return &e
}

func (e *MeldListRecurring) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = MeldListRecurring(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListRecurring: %v", v)
	}
}

// MeldListReminderChoice - reminder_choice
type MeldListReminderChoice string

const (
	MeldListReminderChoiceOverdue  MeldListReminderChoice = "overdue"
	MeldListReminderChoiceToday    MeldListReminderChoice = "today"
	MeldListReminderChoiceTomorrow MeldListReminderChoice = "tomorrow"
	MeldListReminderChoiceWeek     MeldListReminderChoice = "week"
)

func (e MeldListReminderChoice) ToPointer() *MeldListReminderChoice {
	return &e
}

func (e *MeldListReminderChoice) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "overdue":
		fallthrough
	case "today":
		fallthrough
	case "tomorrow":
		fallthrough
	case "week":
		*e = MeldListReminderChoice(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListReminderChoice: %v", v)
	}
}

// MeldListStatus - status
type MeldListStatus string

const (
	MeldListStatusOpen                              MeldListStatus = "OPEN"
	MeldListStatusManagerCanceled                   MeldListStatus = "MANAGER_CANCELED"
	MeldListStatusTenantCanceled                    MeldListStatus = "TENANT_CANCELED"
	MeldListStatusPendingEstimates                  MeldListStatus = "PENDING_ESTIMATES"
	MeldListStatusPendingTenantAvailability         MeldListStatus = "PENDING_TENANT_AVAILABILITY"
	MeldListStatusPendingMoreVendorAvailability     MeldListStatus = "PENDING_MORE_VENDOR_AVAILABILITY"
	MeldListStatusPendingMoreManagementAvailability MeldListStatus = "PENDING_MORE_MANAGEMENT_AVAILABILITY"
	MeldListStatusPendingCompletion                 MeldListStatus = "PENDING_COMPLETION"
	MeldListStatusCompleted                         MeldListStatus = "COMPLETED"
	MeldListStatusVendorCouldNotComplete            MeldListStatus = "VENDOR_COULD_NOT_COMPLETE"
	MeldListStatusMaintenanceCouldNotComplete       MeldListStatus = "MAINTENANCE_COULD_NOT_COMPLETE"
	MeldListStatusPendingVendor                     MeldListStatus = "PENDING_VENDOR"
	MeldListStatusPendingAssignment                 MeldListStatus = "PENDING_ASSIGNMENT"
)

func (e MeldListStatus) ToPointer() *MeldListStatus {
	return &e
}

func (e *MeldListStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "MANAGER_CANCELED":
		fallthrough
	case "TENANT_CANCELED":
		fallthrough
	case "PENDING_ESTIMATES":
		fallthrough
	case "PENDING_TENANT_AVAILABILITY":
		fallthrough
	case "PENDING_MORE_VENDOR_AVAILABILITY":
		fallthrough
	case "PENDING_MORE_MANAGEMENT_AVAILABILITY":
		fallthrough
	case "PENDING_COMPLETION":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "VENDOR_COULD_NOT_COMPLETE":
		fallthrough
	case "MAINTENANCE_COULD_NOT_COMPLETE":
		fallthrough
	case "PENDING_VENDOR":
		fallthrough
	case "PENDING_ASSIGNMENT":
		*e = MeldListStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListStatus: %v", v)
	}
}

// MeldListTpr - tpr
type MeldListTpr string

const (
	MeldListTprFalse MeldListTpr = "false"
	MeldListTprTrue  MeldListTpr = "true"
)

func (e MeldListTpr) ToPointer() *MeldListTpr {
	return &e
}

func (e *MeldListTpr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "false":
		fallthrough
	case "true":
		*e = MeldListTpr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeldListTpr: %v", v)
	}
}

type MeldListRequest struct {
	// The management ID (MID), found in the first number of your URL when logged in:  https://app.propertymeld.com/{MID}/m/123
	XPmOrg int64 `header:"style=simple,explode=false,name=X-Pm-Org"`
	// ack_approval
	AckApproval *MeldListAckApproval `queryParam:"style=form,explode=true,name=ack_approval"`
	// assigned_to_me
	AssignedToMe *string `queryParam:"style=form,explode=true,name=assigned_to_me"`
	// categories
	Categories *MeldListCategories `queryParam:"style=form,explode=true,name=categories"`
	// comments_gte
	CommentsGte *string `queryParam:"style=form,explode=true,name=comments_gte"`
	// comments_lte
	CommentsLte *string `queryParam:"style=form,explode=true,name=comments_lte"`
	// completed__gte
	CompletedGte *string `queryParam:"style=form,explode=true,name=completed__gte"`
	// completed__interval
	CompletedInterval *string `queryParam:"style=form,explode=true,name=completed__interval"`
	// completed__lte
	CompletedLte *string `queryParam:"style=form,explode=true,name=completed__lte"`
	// created__gte
	CreatedGte *string `queryParam:"style=form,explode=true,name=created__gte"`
	// created__interval
	CreatedInterval *string `queryParam:"style=form,explode=true,name=created__interval"`
	// created__lte
	CreatedLte *string `queryParam:"style=form,explode=true,name=created__lte"`
	// created__offset_lte
	CreatedOffsetLte *string `queryParam:"style=form,explode=true,name=created__offset_lte"`
	// due_date_choice
	DueDateChoice *MeldListDueDateChoice `queryParam:"style=form,explode=true,name=due_date_choice"`
	// due_date_gte
	DueDateGte *string `queryParam:"style=form,explode=true,name=due_date_gte"`
	// due_date_lte
	DueDateLte *string `queryParam:"style=form,explode=true,name=due_date_lte"`
	// ever_been_assigned
	EverBeenAssigned *MeldListEverBeenAssigned `queryParam:"style=form,explode=true,name=ever_been_assigned"`
	// exp
	Exp *MeldListExp `queryParam:"style=form,explode=true,name=exp"`
	// exp_s
	ExpS *string `queryParam:"style=form,explode=true,name=exp_s"`
	// files_gte
	FilesGte *string `queryParam:"style=form,explode=true,name=files_gte"`
	// files_lte
	FilesLte *string `queryParam:"style=form,explode=true,name=files_lte"`
	// has_estimates
	HasEstimates *MeldListHasEstimates `queryParam:"style=form,explode=true,name=has_estimates"`
	// invoice_s
	InvoiceS *string `queryParam:"style=form,explode=true,name=invoice_s"`
	// Number of results to return per page.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// maint
	Maint *string `queryParam:"style=form,explode=true,name=maint"`
	// maint_type
	MaintType *MeldListMaintType `queryParam:"style=form,explode=true,name=maint_type"`
	// marked_complete__gte
	MarkedCompleteGte *string `queryParam:"style=form,explode=true,name=marked_complete__gte"`
	// marked_complete__interval
	MarkedCompleteInterval *string `queryParam:"style=form,explode=true,name=marked_complete__interval"`
	// marked_complete__lte
	MarkedCompleteLte *string `queryParam:"style=form,explode=true,name=marked_complete__lte"`
	// meldinvoice
	Meldinvoice *MeldListMeldinvoice `queryParam:"style=form,explode=true,name=meldinvoice"`
	// The initial index from which to return the results.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Ordering
	OrderBy *MeldListOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	// owner_approval
	OwnerApproval *MeldListOwnerApproval `queryParam:"style=form,explode=true,name=owner_approval"`
	// pg
	Pg *string `queryParam:"style=form,explode=true,name=pg"`
	// priority
	Priority *MeldListPriority `queryParam:"style=form,explode=true,name=priority"`
	// project
	Project *string `queryParam:"style=form,explode=true,name=project"`
	// project_assigned
	ProjectAssigned *MeldListProjectAssigned `queryParam:"style=form,explode=true,name=project_assigned"`
	// prop
	Prop *string `queryParam:"style=form,explode=true,name=prop"`
	// rating
	Rating *MeldListRating `queryParam:"style=form,explode=true,name=rating"`
	// recurring
	Recurring *MeldListRecurring `queryParam:"style=form,explode=true,name=recurring"`
	// recurring_meld
	RecurringMeld *string `queryParam:"style=form,explode=true,name=recurring_meld"`
	// remindees
	Remindees *string `queryParam:"style=form,explode=true,name=remindees"`
	// reminder_choice
	ReminderChoice *MeldListReminderChoice `queryParam:"style=form,explode=true,name=reminder_choice"`
	// reminder_gte
	ReminderGte *string `queryParam:"style=form,explode=true,name=reminder_gte"`
	// reminder_lte
	ReminderLte *string `queryParam:"style=form,explode=true,name=reminder_lte"`
	// scheduled__gte
	ScheduledGte *string `queryParam:"style=form,explode=true,name=scheduled__gte"`
	// scheduled__interval
	ScheduledInterval *string `queryParam:"style=form,explode=true,name=scheduled__interval"`
	// scheduled__lte
	ScheduledLte *string `queryParam:"style=form,explode=true,name=scheduled__lte"`
	// scheduling
	Scheduling *string `queryParam:"style=form,explode=true,name=scheduling"`
	// status
	Status *MeldListStatus `queryParam:"style=form,explode=true,name=status"`
	// tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// tags_ex
	TagsEx *string `queryParam:"style=form,explode=true,name=tags_ex"`
	// tpr
	Tpr *MeldListTpr `queryParam:"style=form,explode=true,name=tpr"`
	// unit
	Unit *string `queryParam:"style=form,explode=true,name=unit"`
	// updated__gte
	UpdatedGte *string `queryParam:"style=form,explode=true,name=updated__gte"`
	// updated__interval
	UpdatedInterval *string `queryParam:"style=form,explode=true,name=updated__interval"`
	// updated__lte
	UpdatedLte *string `queryParam:"style=form,explode=true,name=updated__lte"`
	// updated__offset_lte
	UpdatedOffsetLte *string `queryParam:"style=form,explode=true,name=updated__offset_lte"`
	// vendor_scheduled__gte
	VendorScheduledGte *string `queryParam:"style=form,explode=true,name=vendor_scheduled__gte"`
	// vendor_scheduled__interval
	VendorScheduledInterval *string `queryParam:"style=form,explode=true,name=vendor_scheduled__interval"`
	// vendor_scheduled__lte
	VendorScheduledLte *string `queryParam:"style=form,explode=true,name=vendor_scheduled__lte"`
	// wl__gte
	WlGte *string `queryParam:"style=form,explode=true,name=wl__gte"`
	// wl__lte
	WlLte *string `queryParam:"style=form,explode=true,name=wl__lte"`
}

type MeldListResponse struct {
	ContentType                     string
	PaginatedMeldSerializerListList *shared.PaginatedMeldSerializerListList
	StatusCode                      int
	RawResponse                     *http.Response
}
