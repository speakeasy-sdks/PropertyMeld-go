// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"time"
)

type MeldExpendituresListMeldTenantRatingType string

const (
	MeldExpendituresListMeldTenantRatingTypeTenantRatingEnum MeldExpendituresListMeldTenantRatingType = "TenantRatingEnum"
	MeldExpendituresListMeldTenantRatingTypeNullEnum         MeldExpendituresListMeldTenantRatingType = "NullEnum"
)

type MeldExpendituresListMeldTenantRating struct {
	TenantRatingEnum *TenantRatingEnum
	NullEnum         *NullEnum

	Type MeldExpendituresListMeldTenantRatingType
}

func CreateMeldExpendituresListMeldTenantRatingTenantRatingEnum(tenantRatingEnum TenantRatingEnum) MeldExpendituresListMeldTenantRating {
	typ := MeldExpendituresListMeldTenantRatingTypeTenantRatingEnum

	return MeldExpendituresListMeldTenantRating{
		TenantRatingEnum: &tenantRatingEnum,
		Type:             typ,
	}
}

func CreateMeldExpendituresListMeldTenantRatingNullEnum(nullEnum NullEnum) MeldExpendituresListMeldTenantRating {
	typ := MeldExpendituresListMeldTenantRatingTypeNullEnum

	return MeldExpendituresListMeldTenantRating{
		NullEnum: &nullEnum,
		Type:     typ,
	}
}

func (u *MeldExpendituresListMeldTenantRating) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	tenantRatingEnum := new(TenantRatingEnum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&tenantRatingEnum); err == nil {
		u.TenantRatingEnum = tenantRatingEnum
		u.Type = MeldExpendituresListMeldTenantRatingTypeTenantRatingEnum
		return nil
	}

	nullEnum := new(NullEnum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nullEnum); err == nil {
		u.NullEnum = nullEnum
		u.Type = MeldExpendituresListMeldTenantRatingTypeNullEnum
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MeldExpendituresListMeldTenantRating) MarshalJSON() ([]byte, error) {
	if u.TenantRatingEnum != nil {
		return json.Marshal(u.TenantRatingEnum)
	}

	if u.NullEnum != nil {
		return json.Marshal(u.NullEnum)
	}

	return nil, nil
}

type MeldExpendituresListMeld struct {
	Assigned                  *time.Time                            `json:"assigned,omitempty"`
	Assigner                  int64                                 `json:"assigner"`
	BriefDescription          string                                `json:"brief_description"`
	CompletionDate            *time.Time                            `json:"completion_date,omitempty"`
	CompletionNotes           *string                               `json:"completion_notes,omitempty"`
	Created                   time.Time                             `json:"created"`
	Creator                   int64                                 `json:"creator"`
	Description               *string                               `json:"description,omitempty"`
	DueDate                   *time.Time                            `json:"due_date,omitempty"`
	HasPets                   *bool                                 `json:"has_pets,omitempty"`
	HasRegisteredTenant       *bool                                 `json:"has_registered_tenant,omitempty"`
	ID                        int64                                 `json:"id"`
	IsActive                  *bool                                 `json:"is_active,omitempty"`
	MaintenanceNotes          *string                               `json:"maintenance_notes,omitempty"`
	Management                int64                                 `json:"management"`
	ManagementAgentCloser     *int64                                `json:"management_agent_closer,omitempty"`
	ManagerCancellationReason *string                               `json:"manager_cancellation_reason,omitempty"`
	ManagerCancelled          *time.Time                            `json:"manager_cancelled,omitempty"`
	ManagerCanceller          *int64                                `json:"manager_canceller,omitempty"`
	MarkedComplete            *time.Time                            `json:"marked_complete,omitempty"`
	MeldGroup                 int64                                 `json:"meld_group"`
	NotifyOwner               *bool                                 `json:"notify_owner,omitempty"`
	Parent                    *int64                                `json:"parent,omitempty"`
	Pets                      *string                               `json:"pets,omitempty"`
	Priority                  *PriorityEnum                         `json:"priority,omitempty"`
	Project                   *int64                                `json:"project,omitempty"`
	Prop                      MeldExpendituresListProperty          `json:"prop"`
	ReasonCannotComplete      *string                               `json:"reason_cannot_complete,omitempty"`
	RecurringMeld             *int64                                `json:"recurring_meld,omitempty"`
	ReferenceID               *string                               `json:"reference_id,omitempty"`
	ReviewingTenant           *int64                                `json:"reviewing_tenant,omitempty"`
	Started                   *time.Time                            `json:"started,omitempty"`
	Status                    *Status5c6Enum                        `json:"status,omitempty"`
	Tags                      []int64                               `json:"tags"`
	TenantCanceller           *int64                                `json:"tenant_canceller,omitempty"`
	TenantPresenceRequired    *bool                                 `json:"tenant_presence_required,omitempty"`
	TenantRating              *MeldExpendituresListMeldTenantRating `json:"tenant_rating,omitempty"`
	TenantReview              *string                               `json:"tenant_review,omitempty"`
	TenantReviewDate          *time.Time                            `json:"tenant_review_date,omitempty"`
	Unit                      MeldExpendituresListUnit              `json:"unit"`
	Updated                   time.Time                             `json:"updated"`
	VendorCloser              *int64                                `json:"vendor_closer,omitempty"`
	WorkCategory              WorkCategoryEnum                      `json:"work_category"`
	WorkLocation              string                                `json:"work_location"`
}
