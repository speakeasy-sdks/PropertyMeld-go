// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EstimateStatusEnum string

const (
	EstimateStatusEnumEstimatePendingAcceptance EstimateStatusEnum = "ESTIMATE_PENDING_ACCEPTANCE"
	EstimateStatusEnumEstimateInProgress        EstimateStatusEnum = "ESTIMATE_IN_PROGRESS"
	EstimateStatusEnumEstimateSubmitted         EstimateStatusEnum = "ESTIMATE_SUBMITTED"
	EstimateStatusEnumEstimateVendorRejected    EstimateStatusEnum = "ESTIMATE_VENDOR_REJECTED"
	EstimateStatusEnumEstimateOwnerRejected     EstimateStatusEnum = "ESTIMATE_OWNER_REJECTED"
	EstimateStatusEnumEstimateClosed            EstimateStatusEnum = "ESTIMATE_CLOSED"
	EstimateStatusEnumEstimatePendingApproval   EstimateStatusEnum = "ESTIMATE_PENDING_APPROVAL"
	EstimateStatusEnumEstimateApproved          EstimateStatusEnum = "ESTIMATE_APPROVED"
)

func (e EstimateStatusEnum) ToPointer() *EstimateStatusEnum {
	return &e
}

func (e *EstimateStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ESTIMATE_PENDING_ACCEPTANCE":
		fallthrough
	case "ESTIMATE_IN_PROGRESS":
		fallthrough
	case "ESTIMATE_SUBMITTED":
		fallthrough
	case "ESTIMATE_VENDOR_REJECTED":
		fallthrough
	case "ESTIMATE_OWNER_REJECTED":
		fallthrough
	case "ESTIMATE_CLOSED":
		fallthrough
	case "ESTIMATE_PENDING_APPROVAL":
		fallthrough
	case "ESTIMATE_APPROVED":
		*e = EstimateStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EstimateStatusEnum: %v", v)
	}
}
